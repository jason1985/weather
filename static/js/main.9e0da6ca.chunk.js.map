{"version":3,"sources":["components/Temperature.js","components/UpdateIcon.js","App.js","index.js"],"names":["temperatureUnit","kelvin","cel","isNaN","Math","floor","kelvinToF","kelvinToC","Temperature","temp","setCelsius","onClick","className","style","color","UpdateIcon","update","updateWeatherData","xmlns","fill","viewBox","stroke","strokeLinecap","strokeLinejoin","strokeWidth","d","App","useState","weatherData","setWeatherData","location","setLocation","input","setInput","celsius","updating","setUpdating","setTimeout","useEffect","a","fetch","response","json","console","log","getWeatherData","onSubmit","e","preventDefault","type","value","onChange","target","JSON","stringify","undefined","moment","format","name","sys","country","src","weather","icon","onError","onerror","alt","main","description","message","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9e0da6ca.chunk.js","sourcesContent":["import \"./Temperature.css\"\n\nfunction kelvinToC(kelvin){\n  return Math.floor((kelvin - 273.15))\n}\n\nfunction kelvinToF(kelvin){\n  return Math.floor((((kelvin - 273.15) * (9/5)) + 32))\n}\n\n//checks if we want celsius or fahrenheit\nfunction temperatureUnit(kelvin,cel){\n  if(isNaN(kelvin)) return\n\n  if(cel === false) {\n    return kelvinToF(kelvin)\n  } else {\n    return kelvinToC(kelvin)\n  }\n}\n\n//takes in Kelvin temperature unit\n//if cel true convert to celsius else convert for Fahrenheit\nfunction Temperature({ temp, cel, setCelsius }) {\n  return (\n    <div onClick={()=>setCelsius(!cel)} className=\"temperature\">\n      <div className=\"temp\">{temperatureUnit(temp,cel)}</div>\n\t\t\t\t<span style={{color: cel ? '#fcf8f1' : null}}  className=\"c\">&deg;C</span>\n\t\t\t\t<span className=\"divider\">|</span>\n\t\t\t\t<span style={{color: cel ? null : '#fcf8f1'}} className=\"f\">&deg;F</span>\n    </div>\n  )\n}\n\nexport default Temperature","import './UpdateIcon.css'\n\nfunction UpdateIcon({update, updateWeatherData}) {\n\treturn (\n\t\t<svg onClick={updateWeatherData} className={update ? \"icon update\" : \"icon\"} xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\n\t\t\t<path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15\" />\n\t\t</svg>\n\t)\n}\n\nexport default UpdateIcon\n","import { useEffect, useState } from 'react'\nimport moment from 'moment'\nimport Temperature from './components/Temperature'\nimport UpdateIcon from './components/UpdateIcon'\nimport \"./App.css\"\n\nfunction App() {\n  const [weatherData, setWeatherData] = useState(null)\n  const [location, setLocation] = useState('New York City')\n  const [input, setInput] = useState('New York City')\n  const [celsius, setCelsius] = useState(false)\n  const [updating, setUpdating] = useState(false)\n\n  //TODO: clean up this useEffect\n\n  useEffect(()=>{ //first render get New York City's weather\n    (async () => {\n      const response = await fetch(\n        `https://api.openweathermap.org/data/2.5/weather?q=New York City&appid=54d34401fece1e4efc1c4d41e8388c4c`\n      )\n      const json = await response.json()\n      setWeatherData(json)\n      console.log(json)\n    })()\n  },[])\n  \n  \n  useEffect(() => {\n    const getWeatherData = async () => {\n      const response = await fetch(\n        `https://api.openweathermap.org/data/2.5/weather?q=${location}&appid=54d34401fece1e4efc1c4d41e8388c4c`\n      )\n      const json = await response.json()\n      setWeatherData(json)\n      console.log(json)\n    }\n\n    if(updating){\n      getWeatherData()\n    }\n  },[updating,location])\n\n  function handleSubmit(e) {\n    e.preventDefault()\n    updateWeatherData()\n  }\n\n  //only allows for 1 api request every 500ms\n  function updateWeatherData(){\n    if(updating === true) return \n\n    setUpdating(true)\n    setLocation(input)\n    setTimeout(() => {\n      setUpdating(false)\n    },500);\n  }\n\n  return (\n    <div className=\"container\">\n      <div className=\"app\">\n        <form onSubmit={handleSubmit}>\n          <input\n            type=\"text\"\n            value={input}\n            onChange={(e) => setInput(e.target.value)}\n          />\n          <UpdateIcon updateWeatherData={updateWeatherData} update={updating}/>\n        </form>\n        <div  className=\"glass\">\n          <div className=\"panel\">\n            <pre>Raw JSON:{JSON.stringify(weatherData, undefined, 2)}</pre>\n          </div>\n          <div className=\"card\">\n            <div className=\"date\">{moment().format('dddd, Do MMMM')}</div>\n            <div className=\"time\">{moment().format('h:mm a')}</div>\n            {weatherData?.name ? <div className=\"location\">{weatherData?.name}, {weatherData?.sys?.country}</div>: \"\"}\n            <img src={`http://openweathermap.org/img/wn/${weatherData?.weather?.[0]?.icon}@2x.png`} onError={(e)=>{e.target.onerror = null; e.target.src=\"http://openweathermap.org/img/wn/03n@2x.png\"}} alt=\"weather icon\" />\n              <Temperature setCelsius={setCelsius} cel={celsius} temp={weatherData?.main?.temp} />\n            <div className=\"description\">{weatherData?.weather?.[0]?.description}</div>\n            <div className={weatherData?.message ? \"error\" : \"\"}>{weatherData?.message}</div>\n          </div>\n        </div>\n        </div>\n    </div>\n  )\n}\n\nexport default App\n\n\n\n/* <div className=\"sun\"></div> */","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}